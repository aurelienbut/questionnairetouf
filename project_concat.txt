--- Concatenation du projet : C:\Users\aurel\Documents\full of doc\touff questionnaire ---
--- Généré le : 2025-05-05 19:59:01.609500 ---

--- Fichiers Inclus (2) ---
- api\submit-sales-quiz.js
- index_sales_quiz.html

========================================

--- Début du fichier : api\submit-sales-quiz.js ---

// ---> Fichier : api/submit-sales-quiz.js (Nouveau - Pour Quiz Vente/Stratégie) <---

import Airtable from 'airtable';

export default async function handler(request, response) {
  if (request.method !== 'POST') {
    response.setHeader('Allow', ['POST']);
    return response.status(405).json({ error: `Méthode ${request.method} non autorisée` });
  }

  // Utilise la variable d'environnement pour la table Vente/Stratégie
  const {
      AIRTABLE_API_KEY,
      AIRTABLE_BASE_ID,
      AIRTABLE_SALES_TABLE_NAME // <= NOUVELLE VARIABLE À CRÉER DANS VERCEL
  } = process.env;

  if (!AIRTABLE_API_KEY || !AIRTABLE_BASE_ID || !AIRTABLE_SALES_TABLE_NAME) {
    console.error("Erreur Critique: Variables d'environnement Airtable manquantes pour le quiz Vente ! Vérifiez AIRTABLE_API_KEY, AIRTABLE_BASE_ID, et AIRTABLE_SALES_TABLE_NAME.");
    return response.status(500).json({ error: "Erreur de configuration du serveur (Vente)." });
  }

  try {
    const base = new Airtable({ apiKey: AIRTABLE_API_KEY }).base(AIRTABLE_BASE_ID);
    const table = base(AIRTABLE_SALES_TABLE_NAME); // Cible la table Vente

    const data = request.body;

    // Validation simple
    if (!data || typeof data !== 'object' || !data.Email || typeof data.ScoreTotal === 'undefined') {
        console.warn("Données Vente reçues invalides:", data);
        return response.status(400).json({ error: "Les données Vente envoyées sont incomplètes ou mal formatées." });
    }

    // Préparer les champs pour la TABLE VENTE/STRATÉGIE
    // !! Ces clés doivent correspondre aux colonnes de votre table Vente !!
    const recordFields = {
      'Prénom': data.Prenom,
      'Nom': data.Nom,
      'Email': data.Email,
      'Score Total': data.ScoreTotal,
      'Niveau Maturité': data.NiveauMaturite,
      // Champs spécifiques au quiz Vente/Stratégie (basés sur airtableFieldName)
      'Taille Flotte': data.TailleFlotte,
      'Mix Énergétique': data.MixEnergetique, // Réutilisé
      'Suivi CO2': data.SuiviCO2,             // Réutilisé
      'Politique Flotte Verte': data.PolitiqueFlotteVerte, // Nouveau champ (match airtableFieldName)
      'Enjeu Prioritaire Business': data.EnjeuPrioritaireBusiness, // Nouveau champ (match airtableFieldName)
    };

    const createdRecords = await table.create([{ fields: recordFields }]);

    console.log(`Enregistrement Airtable créé (Vente) dans ${AIRTABLE_SALES_TABLE_NAME}: ${createdRecords[0].getId()}`);
    return response.status(201).json({ success: true, message: "Bilan enregistré avec succès." });

  } catch (error) {
    console.error(`Erreur Airtable (Quiz Vente, Table: ${process.env.AIRTABLE_SALES_TABLE_NAME || 'NON DEFINIE'}) :`, error);
    let errorMessage = "Erreur interne (Vente).";
    let statusCode = 500;
     if (error.statusCode) {
      statusCode = error.statusCode;
      errorMessage = `Erreur base de données Vente (${error.statusCode}).`;
      if (statusCode === 422) {
        errorMessage = "Données Vente invalides pour la table Airtable (champs/types/options). Vérifiez config.";
         console.error("Détail erreur 422 Vente:", error.message);
      }
    }
    return response.status(statusCode).json({ error: errorMessage });
  }
}

--- Fin du fichier : api\submit-sales-quiz.js ---

--- Début du fichier : index_sales_quiz.html ---

<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Quiz Stratégie Flotte Automobile</title>

  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/react@18/umd/react.development.js" crossorigin></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" crossorigin></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

  <style>
    @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
    .animate-fade-in { animation: fadeIn 0.5s ease-out forwards; }
    button:disabled { cursor: not-allowed; opacity: 0.6; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen p-4">
  <div id="root" class="w-full max-w-2xl"></div>

  <script type="text/babel">
    const { useState, useEffect } = React;

    // --- Renommé pour clarté : Composant du Quiz "Vente/Stratégie" ---
    function SalesLeadQuiz() {
      // --- États ---
      const [quizStep, setQuizStep] = useState('quiz');
      const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
      const [animateQuestion, setAnimateQuestion] = useState(true);
      const [submissionStatus, setSubmissionStatus] = useState('idle');
      const [score, setScore] = useState(0);
      const [animateScore, setAnimateScore] = useState(false);

      // --- NOUVELLES Questions (Version Vente/Stratégie) ---
      // !! VALIDEZ / AJUSTEZ LES SCORES !!
      const questions = [
        {
          id: 1, title: "Taille de la flotte", question: "Combien de véhicules gérez-vous actuellement dans votre flotte ?",
          options: [ { text: "Moins de 20", score: 1 }, { text: "Entre 20 et 100", score: 2 }, { text: "Entre 100 et 500", score: 3 }, { text: "Plus de 500", score: 4 } ],
          airtableFieldName: "TailleFlotte" // Réutilisé
        },
        {
          id: 2, title: "Mix énergétique", question: "Quel est aujourd'hui le mix énergétique de votre flotte ?",
          options: [ { text: "100% thermique", score: 1 }, { text: "Majoritairement thermique, quelques véhicules hybrides/électriques", score: 2 }, { text: "Mix équilibré entre thermique et électrifié", score: 3 }, { text: "Majoritairement ou 100% électrique", score: 4 } ],
          airtableFieldName: "MixEnergetique" // Réutilisé (similaire RSE original)
        },
        {
          id: 3, title: "Suivi des émissions CO2", question: "Avez-vous déjà calculé les émissions carbone (CO2) liées à vos véhicules ?",
          options: [ { text: "Non, jamais", score: 1 }, { text: "Oui, de manière ponctuelle", score: 2 }, { text: "Oui, avec un suivi régulier", score: 3 } ],
          airtableFieldName: "SuiviCO2" // Réutilisé (similaire RSE original)
        },
        {
          id: 4, title: "Politique RSE Flotte", question: "Disposez-vous d’une politique formalisée pour verdir votre flotte automobile ?",
          options: [ { text: "Non, aucune politique définie", score: 1 }, { text: "Projet en cours", score: 2 }, { text: "Oui, politique claire avec des objectifs chiffrés", score: 3 } ],
          airtableFieldName: "PolitiqueFlotteVerte" // Nouveau nom pour distinguer de l'original si besoin
        },
        {
          id: 5, title: "Enjeu prioritaire aujourd'hui", question: "Quel est votre principal enjeu aujourd'hui concernant votre flotte ?",
          options: [ { text: "Réduire les coûts (TCO, carburant, maintenance)", score: 1 }, { text: "Réduire l’impact environnemental (CO2, ZFE)", score: 3 }, { text: "Préparer la conformité réglementaire (LOM, bilan GES)", score: 2 }, { text: "Optimiser la gestion opérationnelle (suivi, pilotage, digitalisation)", score: 1 } ],
          airtableFieldName: "EnjeuPrioritaireBusiness" // Nouveau nom spécifique
        }
      ];

      const totalQuestions = questions.length;
      const [answers, setAnswers] = useState(Array(totalQuestions).fill(null));

      // Calcul dynamique du score max basé sur les scores définis ci-dessus
      const maxScore = questions.reduce((max, q) => {
          const maxOptionScore = q.options.length > 0 ? Math.max(...q.options.map(opt => opt.score || 0)) : 0;
          return max + maxOptionScore;
      }, 0); // Devrait faire 17 avec les scores actuels

      const [userInfo, setUserInfo] = useState({ firstName: '', lastName: '', email: '' });
      const [userInfoErrors, setUserInfoErrors] = useState({});

      // --- Logique de Calcul de Score, Animation, Sélection, Navigation, User Info (Identique aux versions précédentes) ---
      useEffect(() => { /* Calcul score */
        if (quizStep === 'userInfo' || quizStep === 'results') {
            const finalScore = answers.reduce((sum, answerIndex, questionIndex) => {
              if (answerIndex !== null) {
                const option = questions[questionIndex]?.options[answerIndex];
                return sum + (option?.score || 0); }
              return sum; }, 0);
            setScore(finalScore); }
      }, [quizStep, answers]);

      useEffect(() => { /* Animation score */
        if (quizStep === 'results') { const timer = setTimeout(() => setAnimateScore(true), 300); return () => clearTimeout(timer); }
        else { setAnimateScore(false); }
      }, [quizStep]);

      const handleOptionSelect = (optionIndex) => { /* Mise à jour réponses */
        const newAnswers = [...answers]; newAnswers[currentQuestionIndex] = optionIndex; setAnswers(newAnswers); };

      const handleNext = () => { /* Navigation Suivant */
        if (currentQuestionIndex < totalQuestions - 1) { setAnimateQuestion(false); setTimeout(() => { setCurrentQuestionIndex(currentQuestionIndex + 1); setAnimateQuestion(true); }, 300); }
        else { setQuizStep('userInfo'); } };

      const handlePrevious = () => { /* Navigation Précédent */
        if (quizStep === 'userInfo') { setQuizStep('quiz'); setAnimateQuestion(true); }
        else if (currentQuestionIndex > 0) { setAnimateQuestion(false); setTimeout(() => { setCurrentQuestionIndex(currentQuestionIndex - 1); setAnimateQuestion(true); }, 300); } };

      const handleUserInfoChange = (e) => { /* Maj User Info */
        const { name, value } = e.target; setUserInfo(prevInfo => ({ ...prevInfo, [name]: value }));
        if (userInfoErrors[name]) { setUserInfoErrors(prevErrors => ({ ...prevErrors, [name]: null })); } };

      const validateUserInfo = () => { /* Validation User Info */
        const errors = {}; if (!userInfo.firstName.trim()) errors.firstName = "Le prénom est requis"; if (!userInfo.lastName.trim()) errors.lastName = "Le nom est requis"; if (!userInfo.email.trim()) { errors.email = "L'adresse e-mail est requise"; } else if (!/\S+@\S+\.\S+/.test(userInfo.email)) { errors.email = "L'adresse e-mail n'est pas valide"; } setUserInfoErrors(errors); return Object.keys(errors).length === 0; };

      // --- Fonction Niveau Maturité (Identique) ---
       const getMaturityLevel = (currentScore) => { /* Détermination Niveau */
        if (maxScore === 0) return { level: "Indéterminé", message: "Le score maximum n'est pas défini." };
        const pct = (currentScore / maxScore) * 100;
        if (pct < 40) { return { level: "Potentiel", message: "Des opportunités existent pour optimiser votre stratégie flotte." }; } // Message adapté
        else if (pct < 70) { return { level: "Structuré", message: "Votre approche est structurée, affinons ensemble les prochaines étapes." }; } // Message adapté
        else { return { level: "Mature", message: "Votre stratégie flotte est mature. Explorons les optimisations avancées." }; } // Message adapté
      };

      // --- Fonction de Soumission vers l'API Vente/Stratégie ---
      const handleSendToAirtable = async () => {
        if (!validateUserInfo()) return;
        setSubmissionStatus('submitting');

        const finalScore = score;
        const maturityInfo = getMaturityLevel(finalScore);
        const scorePercentage = maxScore > 0 ? Math.round((finalScore / maxScore) * 100) : 0;

        // Préparer les données spécifiques à ce quiz
        const dataToSend = {
          Prenom: userInfo.firstName, Nom: userInfo.lastName, Email: userInfo.email,
          ScoreTotal: scorePercentage, NiveauMaturite: maturityInfo.level,
        };
        questions.forEach((q, idx) => {
          const fieldName = q.airtableFieldName; // Utilise les nouveaux airtableFieldName
          dataToSend[fieldName] = answers[idx] !== null ? q.options[answers[idx]].text : "Sans réponse";
        });

        // Appel Fetch vers le NOUVEL endpoint API pour ce quiz
        try {
          // ================================================================ //
          // ===> CETTE URL DOIT POINTER VERS VOTRE TROISIÈME ENDPOINT API <=== //
          const response = await fetch('/api/submit-sales-quiz', { // <-- URL POUR CE QUIZ
          // ================================================================ //
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(dataToSend),
          });

          if (!response.ok) { /* Gestion erreur réponse API */
            let errorDetail = `Erreur HTTP: ${response.status}`; try { const errorBody = await response.json(); errorDetail += ` - ${errorBody.error || JSON.stringify(errorBody)}`; } catch (e) {} throw new Error(errorDetail); }

          console.log('Données Vente/Stratégie envoyées avec succès.');
          setSubmissionStatus('success'); setQuizStep('results');
        } catch (error) { /* Gestion erreur fetch/API */
          console.error("Erreur lors de l'envoi vers /api/submit-sales-quiz:", error);
          setSubmissionStatus('error'); setTimeout(() => { if(submissionStatus === 'error') setSubmissionStatus('idle'); }, 5000);
        }
      };

      // --- Fonction Recommencer (Identique) ---
      const restart = () => { /* Réinitialisation */
        setAnswers(Array(totalQuestions).fill(null)); setCurrentQuestionIndex(0); setSubmissionStatus('idle');
        setUserInfo({ firstName: '', lastName: '', email: '' }); setUserInfoErrors({}); setScore(0);
        setQuizStep('quiz'); setAnimateQuestion(true); };

      // --- Variables pour le rendu ---
      const progress = Math.round( (quizStep === 'results' ? totalQuestions : quizStep === 'userInfo' ? totalQuestions : currentQuestionIndex) / totalQuestions * 100 );
      const currentQuestionData = questions[currentQuestionIndex];
      const maturity = (quizStep === 'results') ? getMaturityLevel(score) : null;

      // --- Rendu JSX (Structure identique, textes et données mis à jour) ---
      return (
        <div className="bg-white rounded-xl shadow-xl overflow-hidden mx-auto">
           {/* En-tête adapté */}
           <div className="bg-gradient-to-r from-purple-600 to-indigo-700 p-8 text-center"> {/* Couleur différente? */}
             <h1 className="text-3xl font-bold text-white tracking-tight">Évaluez Votre Stratégie Flotte</h1>
             <p className="text-indigo-100 mt-2 text-lg">
               {quizStep === 'quiz' && `5 questions pour identifier vos priorités.`}
               {quizStep === 'userInfo' && `Indiquez vos coordonnées pour recevoir votre bilan.`}
               {quizStep === 'results' && `Votre bilan personnalisé.`}
             </p>
          </div>

          {/* Contenu principal */}
          <div className="p-6 md:p-8">
             {/* === ÉTAPE QUIZ === */}
             {quizStep === 'quiz' && currentQuestionData && ( <div className={animateQuestion ? 'animate-fade-in' : ''}> {/* ... Progression ... */} {/* ... Question ... */} {/* ... Options ... */} {/* ... Navigation ... */}
                {/* Copier la structure de l'étape quiz des versions précédentes ici */}
                 {/* Progression */}
                 <div className="mb-6">
                   <div className="flex justify-between text-sm text-gray-600 mb-1">
                     <span>Question {currentQuestionIndex + 1} sur {totalQuestions}</span>
                     <span>{progress}%</span>
                   </div>
                   <div className="h-2.5 bg-gray-200 rounded-full overflow-hidden"> <div className="h-full bg-purple-600 transition-all duration-500 ease-out" style={{ width: `${progress}%` }} /> {/* Couleur adaptée? */} </div>
                 </div>
                 {/* Question et Options */}
                 <div>
                    <h2 className="text-xl md:text-2xl font-semibold text-gray-800 mb-2">{currentQuestionData.title}</h2>
                    <p className="text-gray-700 mb-6 text-lg">{currentQuestionData.question}</p>
                    <div className="space-y-3 mb-8">
                      {currentQuestionData.options.map((opt, i) => ( <div key={i} onClick={() => handleOptionSelect(i)} className={`p-4 border rounded-lg flex items-center cursor-pointer transition-all duration-150 ${ answers[currentQuestionIndex] === i ? 'border-purple-500 bg-purple-50 ring-2 ring-purple-200' : 'border-gray-300 hover:bg-gray-50 hover:border-gray-400' }`} > {/* Couleur adaptée? */} <div className={`w-5 h-5 mr-4 rounded-full flex items-center justify-center border-2 ${ answers[currentQuestionIndex] === i ? 'border-purple-600 bg-purple-600' : 'border-gray-400' }`}> {answers[currentQuestionIndex] === i && <svg className="w-3 h-3 text-white fill-current" viewBox="0 0 20 20"><path d="M0 11l2-2 5 5L18 3l2 2L7 18z"/></svg>} </div> <span className={`text-base ${answers[currentQuestionIndex] === i ? 'text-purple-800 font-medium' : 'text-gray-700'}`}>{opt.text}</span> </div> ))}
                    </div>
                 </div>
                 {/* Navigation Quiz */}
                 <div className="flex justify-between items-center mt-8 border-t pt-6">
                   <button onClick={handlePrevious} disabled={currentQuestionIndex === 0} className={`flex items-center px-4 py-2 rounded transition-colors text-base font-medium ${ currentQuestionIndex === 0 ? 'text-gray-400' : 'text-purple-600 hover:bg-purple-50' }`} > <svg className="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"></path></svg> Précédent </button>
                   <button onClick={handleNext} disabled={answers[currentQuestionIndex] === null} className={`flex items-center px-6 py-2.5 rounded-lg text-base font-semibold transition-colors ${ answers[currentQuestionIndex] === null ? 'bg-gray-300 text-gray-500' : 'bg-purple-600 text-white hover:bg-purple-700 shadow-md hover:shadow-lg' }`} > {currentQuestionIndex === totalQuestions - 1 ? 'Valider & Voir Infos' : 'Suivant'} {currentQuestionIndex !== totalQuestions - 1 && <svg className="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path></svg>} </button>
                 </div>
             </div> )}

             {/* === ÉTAPE INFORMATIONS UTILISATEUR === */}
             {quizStep === 'userInfo' && ( <div className="animate-fade-in"> {/* ... Titre ... */} {/* ... Formulaire (Prénom, Nom, Email) ... */} {/* ... Navigation & Soumission ... */} {/* ... Message d'erreur ... */}
                 {/* Copier la structure de l'étape user info des versions précédentes ici */}
                 <h2 className="text-xl md:text-2xl font-semibold text-gray-800 mb-6 text-center">Vos informations pour recevoir votre bilan</h2>
                 <div className="space-y-5 mb-8 max-w-md mx-auto">
                    <div> <label htmlFor="firstName" className="block text-sm font-medium text-gray-700 mb-1">Prénom *</label> <input type="text" id="firstName" name="firstName" value={userInfo.firstName} onChange={handleUserInfoChange} className={`w-full px-4 py-2 border rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500 text-base ${userInfoErrors.firstName ? 'border-red-500' : 'border-gray-300'}`} placeholder="Ex: Jean" /> {userInfoErrors.firstName && <p className="text-red-600 text-xs mt-1">{userInfoErrors.firstName}</p>} </div>
                    <div> <label htmlFor="lastName" className="block text-sm font-medium text-gray-700 mb-1">Nom *</label> <input type="text" id="lastName" name="lastName" value={userInfo.lastName} onChange={handleUserInfoChange} className={`w-full px-4 py-2 border rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500 text-base ${userInfoErrors.lastName ? 'border-red-500' : 'border-gray-300'}`} placeholder="Ex: Dupont" /> {userInfoErrors.lastName && <p className="text-red-600 text-xs mt-1">{userInfoErrors.lastName}</p>} </div>
                    <div> <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">Adresse e-mail professionnelle *</label> <input type="email" id="email" name="email" value={userInfo.email} onChange={handleUserInfoChange} className={`w-full px-4 py-2 border rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500 text-base ${userInfoErrors.email ? 'border-red-500' : 'border-gray-300'}`} placeholder="Ex: jean.dupont@entreprise.com" /> {userInfoErrors.email && <p className="text-red-600 text-xs mt-1">{userInfoErrors.email}</p>} </div>
                 </div>
                 <div className="flex flex-col-reverse md:flex-row gap-4 justify-between items-center border-t pt-6 max-w-md mx-auto">
                   <button onClick={handlePrevious} className="flex items-center justify-center px-4 py-2 rounded text-purple-600 hover:bg-purple-50 transition-colors font-medium md:w-auto w-full"> <svg className="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"></path></svg> Précédent </button>
                   <button onClick={handleSendToAirtable} className={`px-6 py-3 rounded-lg font-semibold transition-all duration-300 ease-in-out flex items-center justify-center md:w-auto w-full shadow-md hover:shadow-lg ${ submissionStatus === 'submitting' ? 'bg-yellow-500 text-white cursor-wait' : submissionStatus === 'error' ? 'bg-red-600 text-white hover:bg-red-700' : 'bg-purple-600 text-white hover:bg-purple-700' }`} disabled={submissionStatus === 'submitting' || !userInfo.firstName || !userInfo.lastName || !userInfo.email || !!userInfoErrors.email } > {submissionStatus === 'submitting' && <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>} {submissionStatus === 'submitting' ? 'Envoi en cours...' : submissionStatus === 'error' ? 'Erreur, réessayer ?' : 'Envoyer & Voir Bilan'} </button>
                 </div>
                 {submissionStatus === 'error' && <p className="text-red-600 text-sm mt-4 text-center max-w-md mx-auto">L'enregistrement a échoué. Veuillez vérifier vos informations ou réessayer.</p>}
             </div> )}

             {/* === ÉTAPE RÉSULTATS === */}
             {quizStep === 'results' && ( <div className="text-center animate-fade-in"> {/* ... Affichage Score SVG ... */} {/* ... Niveau et Message Maturité ... */} {/* ... Récapitulatif Réponses ... */} {/* ... Bouton Recommencer ... */}
                 {/* Copier la structure de l'étape résultats des versions précédentes ici */}
                  <div className="flex justify-center mb-6"> <div className="relative w-40 h-40"> <svg viewBox="0 0 100 100" className="w-full h-full transform -rotate-90"> <circle cx="50" cy="50" r="45" fill="none" stroke="#F3E8FF" strokeWidth="10"/> {/* Couleur adaptée? */} <circle cx="50" cy="50" r="45" fill="none" stroke="#8B5CF6" strokeWidth="10" strokeDasharray="283" strokeDashoffset={animateScore && maxScore > 0 ? 283 - (283 * (score / maxScore)) : 283} className="transition-all duration-1000 ease-out" strokeLinecap="round"/> {/* Couleur adaptée? */} </svg> <div className="absolute inset-0 flex items-center justify-center"> <span className={`text-4xl font-bold text-purple-600 transition-opacity duration-500 ${animateScore ? 'opacity-100' : 'opacity-0'}`}> {maxScore > 0 ? Math.round((score / maxScore) * 100) : 0}% </span> </div> </div> </div>
                  {maturity && ( <> <h2 className="text-2xl md:text-3xl font-bold text-gray-800 mb-2">Votre profil : {maturity.level}</h2> <p className="text-gray-600 text-lg mb-8">{maturity.message}</p> </> )}
                  <div className="bg-gray-50 border border-gray-200 p-6 rounded-lg mb-8 text-left max-w-lg mx-auto"> <h3 className="font-semibold text-lg text-gray-800 mb-4">Récapitulatif de vos réponses :</h3> <div className="space-y-4"> {questions.map((q, idx) => ( <div key={q.id}> <p className="font-medium text-gray-700">{q.title}</p> <div className="flex items-start mt-1 pl-4"> <span className="mr-2 text-purple-500 font-semibold">›</span> <span className="text-gray-600"> {answers[idx] !== null ? q.options[answers[idx]].text : <span className="text-gray-400 italic">Sans réponse</span>} </span> </div> </div> ))} </div> </div>
                  <div className="flex justify-center mt-8"> <button onClick={restart} className="px-6 py-3 border border-purple-600 text-purple-600 rounded-lg hover:bg-purple-50 font-medium transition-colors duration-150"> Recommencer le Quiz </button> </div>
                  <p className="text-sm text-gray-500 mt-4">Vos réponses ont été enregistrées.</p>
             </div> )}
          </div>

          {/* Footer */}
          <div className="text-center text-gray-500 text-xs py-4 border-t border-gray-200 mt-8">
             © {new Date().getFullYear()} | Votre Entreprise - Diagnostic Flotte
          </div>
        </div>
      );
    } // Fin du composant SalesLeadQuiz

    // --- Démarrage ---
    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(<SalesLeadQuiz />); // Rend le nouveau composant
  </script>
</body>
</html>

--- Fin du fichier : index_sales_quiz.html ---
